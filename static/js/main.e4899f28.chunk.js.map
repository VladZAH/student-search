{"version":3,"sources":["components/Card.js","components/List.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","averageCalc","grades","reduce","a","b","parseInt","length","expand","button","expanded","state","setState","btn","handleNewTag","e","newTag","target","value","handeTagSubmit","key","trim","student","tags","includes","addTags","id","aver","this","i","push","tagsList","j","className","onClick","src","pic","alt","firstName","lastName","email","company","skill","type","onChange","placeholder","onKeyPress","React","Component","List","handleRender","final","data","searchByName","searchByTag","filter","toLowerCase","indexOf","withTag","map","onNameSearch","onTagSearch","tag","idToPos","newPiece","slice","Axios","get","then","results","students","forEach","el","catch","error","console","log","tagsArray","inputTag","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"8TA8GeA,G,wDAxGX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IASVC,YAAc,SAACC,GACX,OAAOA,EAAOC,QAAO,SAACC,EAAGC,GAAJ,OAAUC,SAASF,GAAKE,SAASD,MAAMH,EAAOK,QAXrD,EAelBC,OAAS,WAEL,IAAIC,EAAQC,EAER,EAAKC,MAAMH,QAIXC,EAAS,IACTC,GAAW,IAJXD,EAAS,IACTC,GAAW,GAMf,EAAKE,SAAS,CACZJ,OAAQE,EACRG,IAAKJ,KA7BO,EAkClBK,aAAe,SAACC,GACZ,EAAKH,SAAS,CACVI,OAAQD,EAAEE,OAAOC,SApCP,EAyClBC,eAAiB,SAACJ,GAGA,UAAVA,EAAEK,KAAkD,KAA/B,EAAKT,MAAMK,OAAOK,KAAK,KAAe,EAAKrB,MAAMsB,QAAQC,KAAKC,SAAS,EAAKb,MAAMK,UACvG,EAAKhB,MAAMyB,QAAQ,EAAKzB,MAAMsB,QAAQI,GAAIX,EAAEE,OAAOC,OAGnD,EAAKN,SAAS,CAACI,OAAQ,OA9C3B,EAAKL,MAAQ,CACTH,QAAQ,EACRK,IAAK,IACLG,OAAQ,IALE,E,qDA2Dd,IAJA,IAAIW,EAAOC,KAAK3B,YAAY2B,KAAK5B,MAAMsB,QAAQpB,QAG3CA,EAAS,GACJ2B,EAAI,EAAGA,EAAID,KAAK5B,MAAMsB,QAAQpB,OAAOK,OAAQsB,IAClD3B,EAAO4B,KAAK,uBAAGV,IAAKS,GAAR,QAAkBA,EAAE,EAApB,KAA0BD,KAAK5B,MAAMsB,QAAQpB,OAAO2B,GAApD,MAKhB,IADA,IAAIE,EAAW,GACNC,EAAI,EAAGA,EAAIJ,KAAK5B,MAAMsB,QAAQC,KAAKhB,OAAQyB,IAC5CD,EAASD,KAAK,wBAAIG,UAAU,MAAMb,IAAKY,GAAzB,IAA8BJ,KAAK5B,MAAMsB,QAAQC,KAAKS,GAAtD,MAGtB,OACI,yBAAKC,UAAU,QACX,4BAAQA,UAAU,aAAaC,QAASN,KAAKpB,QAASoB,KAAKjB,MAAME,KACjE,yBAAKsB,IAAKP,KAAK5B,MAAMsB,QAAQc,IAAKC,IAAI,KACtC,yBAAKJ,UAAU,eACX,yBAAKA,UAAU,QACX,4BAAKL,KAAK5B,MAAMsB,QAAQgB,UAAxB,IAAoCV,KAAK5B,MAAMsB,QAAQiB,WAE3D,yBAAKN,UAAU,QACX,qCAAWL,KAAK5B,MAAMsB,QAAQkB,OAC9B,uCAAaZ,KAAK5B,MAAMsB,QAAQmB,SAChC,qCAAWb,KAAK5B,MAAMsB,QAAQoB,OAC9B,uCAAaf,EAAb,KACCC,KAAKjB,MAAMH,QACZ,6BACI,yBAAKyB,UAAU,YAAY/B,GAC3B,yBAAK+B,UAAU,aAAaF,GAC5B,2BAAOE,UAAU,sBACbU,KAAK,OAAOzB,MAASU,KAAKjB,MAAMK,OAChC4B,SAAUhB,KAAKd,aACf+B,YAAc,YACdC,WAAYlB,KAAKT,yB,GA3F9B4B,IAAMC,YC6IVC,G,wDA1IX,aAAc,IAAD,8BACT,gBAwBJC,aAAe,WAGX,IAAIC,EAAQ,EAAKxC,MAAMyC,KAGQ,KAA5B,EAAKzC,MAAM0C,cAAkD,KAA3B,EAAK1C,MAAM2C,cAkB5CH,EAfuB,EAAKxC,MAAMyC,KAAKG,QACnC,SAACjC,GACG,OAA2F,IAApFA,EAAQgB,UAAUkB,cAAcC,QAAQ,EAAK9C,MAAM0C,aAAaG,iBACmB,IAAnFlC,EAAQiB,SAASiB,cAAcC,QAAQ,EAAK9C,MAAM0C,aAAaG,kBAK1CD,QAChC,SAACjC,GACG,OAAO,EAAKoC,QAAQpC,EAAQC,KAAM,EAAKZ,MAAM2C,iBAS1B,KAA5B,EAAK3C,MAAM0C,cAAkD,KAA3B,EAAK1C,MAAM2C,cAW5CH,EARuB,EAAKxC,MAAMyC,KAAKG,QACnC,SAACjC,GACG,OAA2F,IAApFA,EAAQgB,UAAUkB,cAAcC,QAAQ,EAAK9C,MAAM0C,aAAaG,iBACmB,IAAnFlC,EAAQiB,SAASiB,cAAcC,QAAQ,EAAK9C,MAAM0C,aAAaG,mBASpD,KAA3B,EAAK7C,MAAM2C,aAAkD,KAA5B,EAAK3C,MAAM0C,eAU3CF,EAPuB,EAAKxC,MAAMyC,KAAKG,QACnC,SAACjC,GACG,OAAO,EAAKoC,QAAQpC,EAAQC,KAAM,EAAKZ,MAAM2C,iBASzD,OAAOH,EAAMQ,KAAI,SAACrC,GACd,OACI,yBAAKF,IAAKE,EAAQI,IAChB,kBAAC,EAAD,CAAMJ,QAASA,EAASG,QAAS,EAAKA,QAASL,IAAKE,EAAQI,UArF7D,EA4FbkC,aAAe,SAAC7C,GACZ,EAAKH,SAAS,CAACyC,aAActC,EAAEE,OAAOC,SA7F7B,EAiGb2C,YAAc,SAAC9C,GACX,EAAKH,SAAS,CAAC0C,YAAavC,EAAEE,OAAOC,SAlG5B,EAsGbO,QAAU,SAACC,EAAIoC,GAGX,IAAIC,EAAUzD,SAASoB,GAAM,EAGzBsC,EAAW,EAAKrD,MAAMyC,KAAKa,MAAM,GAGrCD,EAASD,GAASxC,KAAKO,KAAKgC,GAG5B,EAAKlD,SAAS,CAACwC,KAAMY,KAhHrB,EAAKrD,MAAQ,CACTyC,KAAM,GACNC,aAAc,GACdC,YAAa,IALR,E,gEASQ,IAAD,OAGhBY,IAAMC,IAAN,gDAGCC,MAAK,SAACC,GACHA,EAAQjB,KAAKkB,SAASC,SAAS,SAAAC,GAC3BA,EAAGjD,KAAO,MAEd,EAAKX,SAAS,CAACwC,KAAMiB,EAAQjB,KAAKkB,cAErCG,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,Q,8BAkGxBG,EAAWC,GACf,OAAOD,EAAUpB,QAAQqB,IAAa,I,+BAItC,OACI,6BACI,6BACI,2BAAOnC,KAAK,OAAOE,YAAY,iBAAiBnB,GAAG,aAAaR,MAAOU,KAAKjB,MAAM0C,aAAcT,SAAUhB,KAAKgC,eAC/G,2BAAOjB,KAAK,OAAOE,YAAY,gBAAgBnB,GAAG,YAAYR,MAAOU,KAAKjB,MAAM2C,YAAaV,SAAUhB,KAAKiC,eAEhH,yBAAK5B,UAAU,QACVL,KAAKsB,qB,GApIPH,IAAMC,Y,MCOV+B,MARf,WACE,OACE,yBAAK9C,UAAU,OACb,kBAAC,EAAD,QCGc+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdrB,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMqB,c","file":"static/js/main.e4899f28.chunk.js","sourcesContent":["import React from 'react';\nimport './styles/card.css';\n\n//coded by Vlad Zahorodnyy\n\nclass Card extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            expand: false,\n            btn: '+',\n            newTag: '',\n        };\n    }\n\n    // small function we will be using to calculate average grade\n    averageCalc = (grades) => {\n        return grades.reduce((a, b) => parseInt(a) + parseInt(b)) / grades.length\n    }\n\n    // function that expands grades and tags view, and changes button and 'expanded' state, triggered by '+' button\n    expand = () => {\n\n        let button, expanded;\n\n        if(!this.state.expand){\n            button = '-'\n            expanded = true\n        }else{\n            button = '+'\n            expanded = false\n        }\n\n        this.setState({\n          expand: expanded,\n          btn: button\n        })\n    }\n\n    // handles input change that corresponds to adding new tags by loading input to the state\n    handleNewTag = (e) => {\n        this.setState({\n            newTag: e.target.value\n        })\n    }\n\n    // handles pressing enter(submitting) on input that corresponds to adding new tags by using our special function from props\n    handeTagSubmit = (e) => {\n\n        // checking to prevent adding empty space or the tag that already exists to our student tags list\n        if (e.key === 'Enter' && this.state.newTag.trim('') !== '' && !this.props.student.tags.includes(this.state.newTag)) {                          \n            this.props.addTags(this.props.student.id, e.target.value)\n\n            // setting input that corresponds to adding new tags to empty string to allow adding more tags\n            this.setState({newTag: ''})\n        }\n    }\n\n    render(){\n        \n        // calculating average grade using function we created above\n        var aver = this.averageCalc(this.props.student.grades)\n\n        // making array of grades to render wrapped in paragraph with keys\n        var grades = []\n        for (var i = 0; i < this.props.student.grades.length; i++) {            \n            grades.push(<p key={i}>Test {(i+1)}: {this.props.student.grades[i]}%</p>);\n        }\n\n        // making array of grades to render wrapped in <li> and with className and with keys\n        var tagsList = []\n        for (var j = 0; j < this.props.student.tags.length; j++){\n                tagsList.push(<li className=\"tag\" key={j}> {this.props.student.tags[j]} </li>);                \n        }\n\n        return (\n            <div className='card'>\n                <button className='expand-btn' onClick={this.expand}>{this.state.btn}</button>\n                <img src={this.props.student.pic} alt=''></img>\n                <div className='description'>\n                    <div className='Name'>\n                        <h1>{this.props.student.firstName} {this.props.student.lastName}</h1>                    \n                    </div>\n                    <div className='info'>\n                        <p>Email: {this.props.student.email}</p>\n                        <p>Company: {this.props.student.company}</p>\n                        <p>Skill: {this.props.student.skill}</p>\n                        <p>Average: {aver}%</p>\n                        {this.state.expand &&  \n                        <div> \n                            <div className=\"expanded\">{grades}</div>\n                            <div className=\"expanded2\">{tagsList}</div>\n                            <input className=\"â€‹add-tag-input\" \n                                type=\"text\" value = {this.state.newTag} \n                                onChange={this.handleNewTag} \n                                placeholder = \"Add a tag\" \n                                onKeyPress={this.handeTagSubmit}\n                            > \n                            </input>   \n                        </div>                                \n                        }     \n                    </div>           \n                </div>\n\n            </div>\n        );\n    }\n\n}\n\nexport default Card;","import React from 'react';\nimport Axios from 'axios';\nimport Card from './Card'\nimport './styles/list.css'\n\n//coded by Vlad Zahorodnyy\n\nclass List extends React.Component{\n    constructor(){\n        super();\n        this.state = {\n            data: [],\n            searchByName: '',\n            searchByTag: ''\n        };\n    }\n\n    componentDidMount() {\n        \n        // making Api call using Axios\n        Axios.get(`https://api.hatchways.io/assessment/students`)\n\n        // Adding empty array for tags to each student, and setting our state with data we have got\n        .then((results) => {\n            results.data.students.forEach( el => {\n                el.tags = [];\n            })\n            this.setState({data: results.data.students})\n        })\n        .catch((error)=>console.log(error)) \n    }\n\n    // function that handles render depending on our search\n    handleRender = () => {\n        \n        //our final array to render  will be our 'state.data' unless changed by searching \n        let final = this.state.data;\n        \n        // if both seaarch inputs (by tag, and by name) are not empty \n        if(this.state.searchByName !== '' && this.state.searchByTag !== ''){\n\n            // first filter students by name\n            let searchedStudents = this.state.data.filter(\n                (student) => {\n                    return student.firstName.toLowerCase().indexOf(this.state.searchByName.toLowerCase()) !== -1\n                        || student.lastName.toLowerCase().indexOf(this.state.searchByName.toLowerCase()) !== -1\n                }\n            );\n            \n            // then filter students by tag, out of 'filtered by name students'\n            let searchedBoth = searchedStudents.filter(\n                (student) => {\n                    return this.withTag(student.tags, this.state.searchByTag)\n                }            \n            );\n\n            // assign result to final array which is going to be rendered\n            final = searchedBoth;\n        }\n\n        // if only 'search by name' iput is not empty \n        if(this.state.searchByName !== '' && this.state.searchByTag === ''){\n\n            // filter students by name\n            let searchedStudents = this.state.data.filter(\n                (student) => {\n                    return student.firstName.toLowerCase().indexOf(this.state.searchByName.toLowerCase()) !== -1\n                        || student.lastName.toLowerCase().indexOf(this.state.searchByName.toLowerCase()) !== -1\n                }\n            );\n            \n            // assign result to final array which is going to be rendered\n            final = searchedStudents;\n        }\n\n        // if only 'search by tag' iput is not empty\n        if(this.state.searchByTag !== '' && this.state.searchByName === ''){\n\n            // filter students by tag\n            let studentsWithTags = this.state.data.filter(\n                (student) => {\n                    return this.withTag(student.tags, this.state.searchByTag)\n                }\n            );\n\n            // assign result to final array which is going to be rendered\n            final = studentsWithTags;\n        }\n\n        // map final array (Each element wrapped in our Card component and props are passed)\n        return final.map((student) => {\n            return(\n                <div key={student.id}>\n                  <Card student={student} addTags={this.addTags} key={student.id} />  \n                </div>\n            );\n        });\n    }\n\n    // event handler that loads name search input to the state\n    onNameSearch = (e) => {\n        this.setState({searchByName: e.target.value})\n    }\n\n     // event handler that loads tag search input to the state\n    onTagSearch = (e) => {\n        this.setState({searchByTag: e.target.value})\n    }\n\n    // function that adds tags to each student's 'tags' array, will be passed as a prop to our child component to change state\n    addTags = (id, tag) => {\n        \n        // change student id to position (because arrays are zero based)\n        let idToPos = parseInt(id) - 1;\n\n        // making copy of state.data\n        let newPiece = this.state.data.slice(0);\n\n        // adding new id to the approperiate student using our position to find correct student\n        newPiece[idToPos].tags.push(tag)\n\n        // setting our state with renewed data\n        this.setState({data: newPiece});\n    }\n\n    // small callback function we will be using in our render haandler method \n    // to find out if the student has the tag we are looking for\n    withTag(tagsArray, inputTag) {\n        return tagsArray.indexOf(inputTag) > -1\n    }\n\n    render(){\n        return (\n            <div>\n                <div>\n                    <input type=\"text\" placeholder=\"Search by name\" id='name-input' value={this.state.searchByName} onChange={this.onNameSearch} />\n                    <input type=\"text\" placeholder=\"Search by tag\" id='tag-input' value={this.state.searchByTag} onChange={this.onTagSearch} />\n                </div>\n                <div className='list'>\n                    {this.handleRender()}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default List","import React from 'react';\nimport List from './components/List'\nimport './components/styles/App.css' \n\n//coded by Vlad Zahorodnyy\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <List />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}